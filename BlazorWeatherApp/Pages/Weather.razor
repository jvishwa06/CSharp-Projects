@page "/weather"
@inject WeatherService WeatherService
@inject NavigationManager Navigation
@inject AuthService AuthService

@if (!AuthService.IsAuthenticated)
{
    <h4>Please login to access the weather forecast application.</h4>
    <p><a href="/">Go to Login</a></p>
}
else
{
    <h3>Weather Forecast</h3>

    <input @bind="City" placeholder="Enter city" />
    <button @onclick="GetWeather">Get Weather</button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="error-message">@ErrorMessage</p>
    }

    @if (WeatherDataList.Count > 0)
    {
        <h4>Weather Data</h4>
        <table>
            <thead>
                <tr>
                    <th>City</th>
                    <th>Temperature (°C)</th>
                    <th>Humidity (%)</th>
                    <th>Pressure (hPa)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var weather in WeatherDataList)
                {
                    <tr>
                        <td>@weather.Name</td>
                        <td>@weather.Main?.Temp</td>
                        <td>@weather.Main?.Humidity</td>
                        <td>@weather.Main?.Pressure</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<style>
  input {
    padding: 10px;
    margin: 10px 0;
    width: 250px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
  }

  button {
    padding: 10px 20px;
    font-size: 16px;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    font-size: 16px;
    text-align: left;
  }

  th, td {
    padding: 12px 15px;
    border: 1px solid #ddd;
  }

  th {
    background-color: #007bff;
    color: white;
  }

  tr:nth-child(even) {
    background-color: #f2f2f2;
  }

  tr:hover {
    background-color: #f1f1f1;
  }

  .error-message {
    color: red;
    font-weight: bold;
  }
</style>

@code {
    private string City { get; set; } = string.Empty;
    private List<WeatherResponse> WeatherDataList { get; set; } = new List<WeatherResponse>();
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task GetWeather()
    {
        try
        {
            ErrorMessage = string.Empty; // Clear previous error message
            if (!string.IsNullOrEmpty(City))
            {
                var weatherResponse = await WeatherService.GetWeatherAsync(City);
                if (weatherResponse != null && !WeatherDataList.Any(w => w.Name.Equals(weatherResponse.Name, StringComparison.OrdinalIgnoreCase)))
                {
                    WeatherDataList.Insert(0, weatherResponse);

                    // Send data to the Web API for storage in MongoDB
                    var success = await WeatherService.AddWeatherDataToApi(weatherResponse);
                    if (!success)
                    {
                        ErrorMessage = "Failed to save weather data to MongoDB.";
                    }

                    City = string.Empty; // Clear input field
                }
                else
                {
                    ErrorMessage = "Enter a valid city name."; // Invalid city
                }
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Error occurred while fetching or saving weather data.";
        }
    }
}
